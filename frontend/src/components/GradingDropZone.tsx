import { useState } from 'react'
import { useDroppable } from '@dnd-kit/core'
import { motion } from 'framer-motion'
import { Award, ThumbsUp, AlertCircle, User, CheckCircle } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Submission } from '@/types'
import { submissionsAPI } from '@/lib/api'
import toast from 'react-hot-toast'

interface GradingDropZoneProps {
  onGradeAssigned: () => void
}

type GradeLevel = {
  id: string
  number: string
  label: string
  description: string
  color: string
  bgColor: string
  hoverColor: string
  icon: React.ComponentType<any>
  status: 'excellent' | 'good' | 'needs_work'
}

const gradeLevels: GradeLevel[] = [
  {
    id: 'grade-1',
    number: '1',
    label: '–û—Ç–ª–∏—á–Ω–æ',
    description: '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    color: 'text-green-600',
    bgColor: 'bg-green-50 border-green-200',
    hoverColor: 'hover:bg-green-100 hover:border-green-300',
    icon: Award,
    status: 'excellent'
  },
  {
    id: 'grade-2', 
    number: '2',
    label: '–•–æ—Ä–æ—à–æ',
    description: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ',
    color: 'text-blue-600',
    bgColor: 'bg-blue-50 border-blue-200',
    hoverColor: 'hover:bg-blue-100 hover:border-blue-300',
    icon: ThumbsUp,
    status: 'good'
  },
  {
    id: 'grade-3',
    number: '3', 
    label: '–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å',
    description: '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π',
    color: 'text-yellow-600',
    bgColor: 'bg-yellow-50 border-yellow-200',
    hoverColor: 'hover:bg-yellow-100 hover:border-yellow-300',
    icon: AlertCircle,
    status: 'needs_work'
  }
]

interface DropZoneProps {
  grade: GradeLevel
  onDrop: (submission: Submission) => void
}

function GradeDropZone({ grade, onDrop }: DropZoneProps) {
  const { isOver, setNodeRef } = useDroppable({
    id: grade.id,
    data: { 
      accepts: ['submission'],
      grade: grade.status
    }
  })

  const Icon = grade.icon

  return (
    <motion.div
      ref={setNodeRef}
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      className={`
        relative border-2 border-dashed rounded-xl p-6 transition-all duration-200
        ${grade.bgColor} ${grade.hoverColor}
        ${isOver ? 'scale-105 shadow-lg border-solid' : ''}
      `}
    >
      {/* –ù–æ–º–µ—Ä –æ—Ü–µ–Ω–∫–∏ */}
      <div className="flex items-center justify-center mb-4">
        <div className={`
          w-12 h-12 rounded-full flex items-center justify-center text-2xl font-bold
          ${isOver ? 'bg-white shadow-md' : 'bg-white/50'}
          ${grade.color}
        `}>
          {grade.number}
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ü–µ–Ω–∫–µ */}
      <div className="text-center space-y-2">
        <div className="flex items-center justify-center space-x-2">
          <Icon className={`h-5 w-5 ${grade.color}`} />
          <h3 className={`font-semibold ${grade.color}`}>
            {grade.label}
          </h3>
        </div>
        
        <p className="text-sm text-gray-600 dark:text-gray-400">
          {grade.description}
        </p>
      </div>

      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */}
      {isOver && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="absolute inset-0 rounded-xl bg-white/20 border-2 border-solid border-current flex items-center justify-center"
        >
          <div className="text-center">
            <CheckCircle className={`h-8 w-8 mx-auto mb-2 ${grade.color}`} />
            <p className={`font-medium ${grade.color}`}>
              –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É "{grade.label}"
            </p>
          </div>
        </motion.div>
      )}
    </motion.div>
  )
}

export function GradingDropZone({ onGradeAssigned }: GradingDropZoneProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [recentlyGraded, setRecentlyGraded] = useState<string[]>([])

  const handleDrop = async (submission: Submission, gradeStatus: string) => {
    setIsLoading(true)
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
      let teacherGrade: number
      switch (gradeStatus) {
        case 'excellent':
          teacherGrade = Math.floor(Math.random() * 11) + 90 // 90-100
          break
        case 'good':
          teacherGrade = Math.floor(Math.random() * 11) + 80 // 80-90
          break
        case 'needs_work':
          teacherGrade = Math.floor(Math.random() * 11) + 70 // 70-80
          break
        default:
          teacherGrade = 75
      }

      await submissionsAPI.assess(submission.id, {
        status: gradeStatus as any,
        teacherGrade,
        teacherComment: `–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ${gradeStatus === 'excellent' ? '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!' : gradeStatus === 'good' ? '–•–æ—Ä–æ—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ' : '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}`
      })

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const gradeInfo = gradeLevels.find(g => g.status === gradeStatus)
      toast.success(
        `–†–∞–±–æ—Ç–∞ "${submission.studentName}" –æ—Ü–µ–Ω–µ–Ω–∞ –∫–∞–∫ "${gradeInfo?.label}" (${teacherGrade}/100)`,
        { duration: 4000 }
      )

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö
      setRecentlyGraded(prev => [...prev, submission.id])
      setTimeout(() => {
        setRecentlyGraded(prev => prev.filter(id => id !== submission.id))
      }, 3000)

      onGradeAssigned()
      
    } catch (error) {
      console.error('Error grading submission:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h2 className="text-xl font-bold text-gray-800 dark:text-gray-200 mb-2">
          –ü–∞–Ω–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
        </h2>
        <p className="text-sm text-gray-600 dark:text-gray-400">
          –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –æ–¥–Ω—É –∏–∑ –∑–æ–Ω –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
        </p>
      </div>

      {/* –ó–æ–Ω—ã –¥–ª—è –æ—Ü–µ–Ω–æ–∫ */}
      <div className="space-y-4">
        {gradeLevels.map((grade) => (
          <GradeDropZone
            key={grade.id}
            grade={grade}
            onDrop={(submission) => handleDrop(submission, grade.status)}
          />
        ))}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-4 rounded-lg">
        <h3 className="font-medium text-blue-800 dark:text-blue-200 mb-2">
          üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
        </h3>
        <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
          <li>‚Ä¢ –í–æ–∑—å–º–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞</li>
          <li>‚Ä¢ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ—ë –≤ –Ω—É–∂–Ω—É—é –∑–æ–Ω—É –æ—Ü–µ–Ω–∫–∏ (1, 2 –∏–ª–∏ 3)</li>
          <li>‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è</li>
        </ul>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <div className="flex items-center justify-center p-4">
          <div className="flex items-center space-x-2 text-blue-600">
            <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
            <span className="text-sm">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏...</span>
          </div>
        </div>
      )}
    </div>
  )
}
