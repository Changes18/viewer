# Production Deployment Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–µ

param(
    [string]$Environment = "production",
    [string]$Domain = "localhost",
    [switch]$UseDocker,
    [switch]$SetupSSL
)

Write-Host "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω..." -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (-not (Test-Path ".env")) {
    Write-Host "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ .env —Ñ–∞–π–ª–∞" -ForegroundColor Red
    exit 1
}

# –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
Write-Host "üì¶ –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..." -ForegroundColor Yellow
Set-Location frontend
npm run build
Set-Location ..

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
$requiredFiles = @(
    "backend/package.json",
    "bot/package.json", 
    "frontend/dist/index.html"
)

foreach ($file in $requiredFiles) {
    if (-not (Test-Path $file)) {
        Write-Host "‚ùå –§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        exit 1
    }
}

if ($UseDocker) {
    Write-Host "üê≥ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å Docker..." -ForegroundColor Yellow
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Dockerfile –¥–ª—è backend
    $backendDockerfile = @"
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 3001
CMD ["node", "server.js"]
"@
    $backendDockerfile | Out-File -FilePath "backend/Dockerfile" -Encoding UTF8
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Dockerfile –¥–ª—è –±–æ—Ç–∞
    $botDockerfile = @"
FROM node:18-alpine
RUN apk add --no-cache python3 py3-pip make g++
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
CMD ["node", "bot.js"]
"@
    $botDockerfile | Out-File -FilePath "bot/Dockerfile" -Encoding UTF8
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Dockerfile –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    $frontendDockerfile = @"
FROM nginx:alpine
COPY dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
"@
    $frontendDockerfile | Out-File -FilePath "frontend/Dockerfile" -Encoding UTF8
    
    # Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    $nginxConf = @"
events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        server_name $Domain;
        root /usr/share/nginx/html;
        index index.html;

        location / {
            try_files `$uri `$uri/ /index.html;
        }

        location /api {
            proxy_pass http://backend:3001;
            proxy_set_header Host `$host;
            proxy_set_header X-Real-IP `$remote_addr;
        }
    }
}
"@
    $nginxConf | Out-File -FilePath "frontend/nginx.conf" -Encoding UTF8
    
    Write-Host "–ó–∞–ø—É—Å–∫ Docker Compose..." -ForegroundColor Yellow
    docker-compose up -d
    
} else {
    Write-Host "üîß –û–±—ã—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..." -ForegroundColor Yellow
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ
    Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend..." -ForegroundColor Gray
    Set-Location backend
    npm ci --only=production
    Set-Location ..
    
    Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π bot..." -ForegroundColor Gray
    Set-Location bot
    npm ci --only=production
    Set-Location ..
    
    # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–ª—è Linux —Å–µ—Ä–≤–µ—Ä–æ–≤)
    $backendService = @"
[Unit]
Description=Student Analysis Backend
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory=/path/to/your/app/backend
ExecStart=/usr/bin/node server.js
Restart=on-failure
Environment=NODE_ENV=production

[Install]
WantedBy=multi-user.target
"@
    
    $botService = @"
[Unit]
Description=Student Analysis Bot
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory=/path/to/your/app/bot
ExecStart=/usr/bin/node bot.js
Restart=on-failure
Environment=NODE_ENV=production

[Install]
WantedBy=multi-user.target
"@
    
    $backendService | Out-File -FilePath "student-backend.service" -Encoding UTF8
    $botService | Out-File -FilePath "student-bot.service" -Encoding UTF8
    
    Write-Host "üìã –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:" -ForegroundColor Green
    Write-Host "   ‚Ä¢ student-backend.service" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ student-bot.service" -ForegroundColor Gray
}

# SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
if ($SetupSSL -and $Domain -ne "localhost") {
    Write-Host "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL..." -ForegroundColor Yellow
    Write-Host "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:" -ForegroundColor Gray
    Write-Host "   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Certbot" -ForegroundColor Gray
    Write-Host "   2. certbot --nginx -d $Domain" -ForegroundColor Gray
}

Write-Host "`n‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Green
Write-Host "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Yellow

if ($UseDocker) {
    Write-Host "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: docker-compose ps" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ –õ–æ–≥–∏: docker-compose logs -f" -ForegroundColor Gray
} else {
    Write-Host "   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .service —Ñ–∞–π–ª—ã –≤ /etc/systemd/system/" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ sudo systemctl enable student-backend" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ sudo systemctl enable student-bot" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ sudo systemctl start student-backend student-bot" -ForegroundColor Gray
}

Write-Host "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (Nginx/Apache) –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ" -ForegroundColor Gray
Write-Host "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω –∏ SSL" -ForegroundColor Gray
